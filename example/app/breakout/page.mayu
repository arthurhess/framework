initial_state do |props|
  {
    x: 0.5,
    y: 0.5,
    direction: 0.0,
    speed: 0.05,
    player_x: 0.5,
  }
end

mount do
  loop do
    update do |state|
      direction = state[:direction]
      sx = Math.cos(state[:direction])
      sy = Math.sin(state[:direction])

      speed = state[:speed]

      x = state[:x] + sx * speed
      y = state[:y] + sy * speed

      if x > 1.0
        x = 1.0
        direction += rand * Math::PI
        speed = 0.03 + rand * 0.08
      elsif x < 0.0
        x = 0.0
        direction += rand * Math::PI
        speed = 0.03 + rand * 0.08
      end

      if y > 1.0
        y = 1.0
        direction += rand * Math::PI
        speed = 0.03 + rand * 0.08
      elsif y < 0.0
        y = 0.0
        direction += rand * Math::PI
        speed = 0.03 + rand * 0.08
      end

      { x:, y:, direction:, speed: }
    end
    sleep 0.1
  end
catch => e
p e
end

handler(:move) do |e|
  update(player_x: [[e["value"].to_f, 0.0].max, 1.0].min)
end

render do
  state => {x:, y:, player_x:}

  left = format("%.3f%%", x * 100)
  top = format("%.3f%%", y * 100)
  left2 = format("%.3f%%", player_x * 100)
  player_width = "20%"

  <div>
    <p>I thought it would be cool to make a break out game. Work in progress!</p>
    <div class={styles.game}>
      <div class={styles.ball} style={{ left:, top: }} />
      <div class={styles.player} style={{ left: left2, top: "95%", width: player_width }} />
    </div>
    <input
      class={styles.controller}
      type="range"
      min={0}
      max={1.0}
      step={0.01}
      initial-value={0.5}
      on-input={handler(:move)}
    />
  </div>
end
