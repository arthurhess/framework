require "matrix"

initial_state do |props|
  {
    x: 0.5,
    y: 0.5,
    direction: 0.3,
    speed: 0.1,
    player_x: 0.5,
    bricks: 10.times.map { 10.times.map { 1.0 } }
  }
end

# http://bocilmania.com/2018/04/21/how-to-get-reflection-vector/
def reflect(i, n)
  dn = 2.0 * i.dot(n)
  i - n * dn
end

def reflect_angle(a, n)
  i = Vector[Math.cos(a), Math.sin(a)].normalize
  r = reflect(i, n)
  Math.atan2(r[1], r[0])
end

mount do
  loop do
    update do |state|
      state => { x:, y:, direction:, speed: }

      if x > 1.0
        direction = reflect_angle(direction, Vector[-1, 0])
      elsif x < -1.0
        direction = reflect_angle(direction, Vector[ 1, 0])
      end

      lol = false

      if y > 1.0
        direction = reflect_angle(direction, Vector[0, 1])
        lol = true
      elsif y < -1.0
        direction = reflect_angle(direction, Vector[0,-1])
        lol = true
      end

      sx = Math.cos(direction)
      sy = Math.sin(direction)

      x = state[:x] + sx * speed
      y = state[:y] + sy * speed

      { x:, y:, direction:, speed:, lol: }
    end
    sleep 0.1
  end
catch => e
p e
end

def clamp(x, min, max)
  case
  when x.>(max) then max
  when x.<(min) then min
  else x
  end
end

handler(:move) do |e|
  update(player_x: clamp(e["value"].to_f, -1.0, 1.0))
end

render do
  state => {x:, y:, player_x:, bricks:}

  left = format("%.3f%%", (x / 2.0 + 0.5) * 100)
  top = format("%.3f%%", (y / 2.0 + 0.5) * 100)
  left2 = format("%.3f%%", player_x * 100)
  player_width = "20%"

  <div>
    <p>I thought it would be cool to make a break out game. Work in progress!</p>
    <div class={styles.game}>
      <div class={styles.bricks}>
      {bricks.each_with_index do |row, i|
        row.each do |brick, j|
          <div class="brick" style={{ top: "#{i}%", left: "#{j}%" }} />
        end
      end}
      </div>
      <div class={styles.ball} style={{ left:, top: }} />
      <div class={styles.player} style={{ left: left2, top: "95%", width: player_width }} />
    </div>
    <input
      class={styles.controller}
      type="range"
      min={-1.0}
      max={1.0}
      step={0.01}
      initial-value={0.0}
      on-input={handler(:move)}
    />
{state[:lol] ? "LOL" : ":("}
  </div>
end
