initial_state do |props|
  {
    data: Array.new(256) { rand },
    c: 0,
  }
end

mount do
  async do
    loop do
      update do |state|
        {
          c: state[:c].next,
          data: state[:data].map { |x| rand > 0.2 ? x : rand }
        }
      end

      sleep props[:speed]
    end
  end
end

RAMP = "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,\"^`'. "

render do
  rows = props[:rows].times.map do |y|
    cols = props[:cols].times.map do |x|
      # i = Math.sin(x / props[:cols].to_f * Math::PI + state[:c]) / 2.0 + 0.5
      # j = Math.cos(y / props[:rows].to_f * Math::PI) / 2.0 + 0.5
      idx = y * props[:rows] + x
      v = state[:data][idx % state[:data].size]

      # <td key={x}>{RAMP[(i * j * RAMP.length).floor]}</td>
      <td key={x}>{RAMP[(v * RAMP.length).floor]}</td>
    end

    <tr key={y}>{cols}</tr>
  end

  <table border={1} width="100%" style="font-family: monospace; text-align: center; font-size: 2em;">
    <tbody>
      {rows}
    </tbody>
  </table>
end
