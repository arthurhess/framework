initial_state do |props|
  { result: nil, error: nil, page: 0, per_page: 20 }
end

mount do
  res = fetch("https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0")
  result = res.json(symbolize_names: true)
  update(result:)
rescue => e
  update(error: e.message)
end

handler :next_page do |e|
  update do |state|
    per_page = state[:per_page]
    total_pages = (state[:result][:results].length / per_page).floor
    { page: [state[:page].succ, total_pages].min }
  end
end

handler :prev_page do |e|
  update { |state| { page: [state[:page].pred, 0].max } }
end

handler :set_per_page do |e|
  update(per_page: e["value"].to_i, page: 0)
end

render do
  pokemons =
    case state[:result]
    in nil
      <div>
        <p>Loading pokémon from <a href="https://pokeapi.co/">PokéAPI</a>...</p>
        <p>This actually loads faster but 1 second is added for the async effect</p>
      </div>
    in results:
      per_page = state[:per_page]
      total_pages = (results.length / per_page).floor
      results_on_this_page = results.slice(state[:page] * per_page, per_page) || []

      <div>
        <div>
          <div>
            Per page:
            <select on-change={handler(:set_per_page)} value={state[:per_page]}>
              <option value={20}>20</option>
              <option value={40}>40</option>
              <option value={80}>80</option>
            </select>
          </div>
          <button on-click={handler(:prev_page)}>Previous page</button>
          <span>Page {state[:page].succ} of {total_pages.succ}</span>
          <button on-click={handler(:next_page)}>Next page</button>
        </div>
        <ul>
          {results_on_this_page.map do |result|
            id = result[:url].scan(/\/(\d+)\//).flatten.last.to_i
            <li key={result[:url]}>
              <a href={"/pokemon/#{id}"}>{result[:name].capitalize}</a>
            </li>
          end}
        </ul>
        <div>
          <div>
            Per page:
            <select on-change={handler(:set_per_page)} value={state[:per_page]}>
              <option value={20}>20</option>
              <option value={40}>40</option>
              <option value={80}>80</option>
            </select>
          </div>
          <button on-click={handler(:prev_page)}>Previous page</button>
          <span>Page {state[:page].succ} of {total_pages.succ}</span>
          <button on-click={handler(:next_page)}>Next page</button>
        </div>
      </div>
    end

  <div>
    <h1>Pokémon</h1>
    {state[:error] && <p>{state[:error]}</p> || nil}
    {pokemons}
  </div>
end
