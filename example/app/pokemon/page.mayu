initial_state do |props|
  {
    result: nil,
    error: nil,
    page: 0,
    per_page: 20,
  }
end

mount do
  res = fetch("https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0")
  result = res.json(symbolize_names: true)
  update(result:)
rescue => e
  update(error: e.message)
end

handler :next_page do |e|
  update do |state|
    per_page = state[:per_page]
    total_pages = (state[:result][:results].length / per_page).floor
    page = [state[:page].succ, total_pages].min
    { page: }
  end
end

handler :prev_page do |e|
  update do |state|
    page = [state[:page].pred, 0].max
    { page: }
  end
end

handler :set_per_page do |e|
  update(
    page: 0,
    per_page: e["value"].to_i,
  )
end

render do
  content =
    case state[:result]
    in nil
      <div>
        <p>Loading pokémon from <a href="https://pokeapi.co/">PokéAPI</a>...</p>
        <p>This actually loads faster but 1 second is added for the async effect</p>
      </div>
    in results:
      per_page = state[:per_page]
      total_pages = (results.length / per_page).floor
      results_on_this_page = results.slice(state[:page] * per_page, per_page) || []

      pagination = (
        <fieldset>
          <legend>Page {state[:page].succ} of {total_pages.succ}</legend>
          <button on-click={handler(:prev_page)}>Previous page</button>
          <button on-click={handler(:next_page)}>Next page</button>
          <div>
            Per page:
            <select on-change={handler(:set_per_page)} value={state[:per_page]}>
              <option value={20}>20</option>
              <option value={40}>40</option>
              <option value={80}>80</option>
            </select>
          </div>
        </fieldset>
      )

      <div>
        {pagination}
        <ul>
          {results_on_this_page.map do |result|
            id = result[:url].scan(/\/(\d+)\//).flatten.last.to_i
            <li key={result[:url]}>
              <a href={"/pokemon/#{id}"}>{result[:name].capitalize}</a>
            </li>
          end}
        </ul>
        {pagination}
      </div>
    end

  error = <p>{state[:error]}</p> if state[:error]

  <div>
    <h1>Pokémon</h1>
    {error}
    {content}
    <details style={{ margin: "2em 0" }}>
      <summary>Show source</summary>
      <pre style={{ background: "#f0f0f0", padding: "1em" }}>{CGI.escape_html(source)}</pre>
    </details>
  </div>
end
