:ruby
  Markdown = import("../Markdown")
%article
  %Markdown
    :plain
      # Stylesheets

      You can write CSS directly inside components, like this:

      ```haml
      :css
        .button { color: #f0f; }
      %button.button Click me
      ```

      This will be transformed into:

      ```haml
      public def render
        Mayu::VDOM.h(:button, "Click me", class: styles[:button])
      end
      ```

      The `styles`-object implments `#[]` which works kinda like the
      [classnames](https://www.npmjs.com/package/classnames) library
      for JS. You can use it like this:

      ```ruby
      styles[:button]
      #=> "/app/components/MyComponent.button"
      styles[:button, active: false]
      #=> "/app/components/MyComponent.button"
      styles[:button, active: true]
      #=> "/app/components/MyComponent.button /app/components/MyComponent.active"
      styles[:button, "foobar"]
      #=> "/app/components/MyComponent.button foobar"
      ```

      Note that you can only use class names.

      ## Root stylesheet

      You can write styles for the root document in ´app/root.css´.
      This is a good place to set up CSS variables and global overrides
      for your document.
      [Example](https://github.com/mayu-live/framework/blob/main/example/app/root.css)

      ## Future ideas

      This doesn't work yet, but there is
      [an issue](https://github.com/mayu-live/framework/issues/25)
      for implementing something like this:

      ```haml
      :css
        article {
          border: 1px solid #f0f;
        }
        button {
          background: #0f0;
        }
      %article
        %button click me
      ```

      Matching by tag-names isn't allowed in Mayu because it wants to avoid surprises
      that sometimes happen when things are matched unexpectedly.
      In this example, it would be possible to generate a class name
      for the button-tag, and then for each button element that matches in the same
      component, it will just pull that class name from the component stylesheet.

      This means that tag name-selectors would be scoped to the current component,
      and it looks kinda ridiculous to do: `%button.button` vs just `%button`...
