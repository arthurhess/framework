:ruby
  Heading = import("/app/components/Layout/Heading")
  Markdown = import("/app/components/Markdown")

%article
  %Markdown{elems: { header: Heading }}
    :plain
      # Stylesheets

      You can write CSS directly inside components, like this:

      ```haml
      :ruby
        def self.get_initial_state(**)
          { count: 0 }
        end
        def handle_click(e)
          update do |state|
            state[:count].succ
          end
        end
      :css
        .outer {
          border: 1px solid #f0f;
        }
        .count {
          font-weight: bold;
        }
        .button {
          background: #0f0;
        }
      .outer
        %p.count= state[:count]
        %button.button(onclick=handle_click) click me
      ```

      Here's another idea, not sure if it's good or not, but maybe:

      ```haml
      :css
        .outer {
          border: 1px solid #f0f;
        }
        button {
          background: #0f0;
        }
      .outer
        %button click me
      ```

      Matching by tag-names isn't allowed in Mayu because it wants to avoid surprises
      that sometimes happen when things are matched unexpectedly.
      In this example, it would be possible to generate a class name
      for the button-tag, and then for each button element that matches in the same
      component, it will just pull that class name from the component stylesheet.
      Not sure about this, but I think it would be a good feature.

      This means that tag name-selectors would be scoped to the current component,
      and it looks kinda ridiculous to do: `%button.button` vs just `%button`...
