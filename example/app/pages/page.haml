:ruby
  MaxWidth = import("/app/components/Layout/MaxWidth")
  Heading = import("/app/components/Layout/Heading")
  Highlight = import("/app/components/Layout/Highlight")
  Details = import("/app/components/Layout/Details")
  Link = import("/app/components/UI/Link")
  Icon = import("/app/components/UI/Icon")
  Counter = import("./Counter")
  FeatureThing = import("./FeatureThing")
  Clock = import("/app/components/Clock")
  Card = import("/app/components/Layout/Card")

:css

%div
  .featuresOuter
    %MaxWidth
      %article.features
        %Heading.features-heading#features(level=1)
          Features
        .features-flex
          .features-col
            %p Here's a list of core features:

            %FeatureThing

            %p
              Read more on
              %a(href="https://github.com/mayu-live/framework#readme" target="_blank")<
                GitHub

          %Card.clock
            %figure.clock-figure
              %Clock(stroke="var(--dark)" fill="var(--yellow-bright)")
              %figcaption.clock-figcaption
                Current UTC-time.
                %a(href="https://github.com/mayu-live/framework/blob/main/example/app/components/Clock.haml" target="_blank")<
                  Show source

    .example-outer
      %MaxWidth
        .article.example
          %Heading.example-heading#example(level=1)
          %p This text was rendered on the server at #{Time.now.utc.to_s}.
          %p
            The counter below was also rendered on the server.
            The only JavaScript required to make it interactive is a small
            runtime that makes a connection to the server and updates
            the DOM whenever the state changes on the server.
            %Link(href="https://github.com/mayu-live/framework/blob/main/example/app/pages/Counter.haml" target="_blank" color="var(--green-dark)")<
              Show source on GitHub
          %Counter(initial_value=7)

          %Details(summary="Show source" lazy)
            %Highlight(language="haml")= File.read('app/pages/Counter.haml')

    .sections-outer
      .sections
        %section.section
          .section-inner
            %Heading.section-title(level=3)
              Interactive web apps without JavaScript
            .section-content
              %Icon.icon(name="fire" color="var(--dark)")
              %ul
                %li You write all logic in Ruby.
                %li All logic runs on the server.
                %li DOM-patches are streamed to the browser.

        %section.section
          .section-inner
            %Heading.section-title(level=3)
              How does it work?
            .section-content
              %Icon.icon(name="wand-magic-sparkles" color="var(--dark)")
              %ul
                %li
                  Mayu implements a
                  %a(href="https://en.wikipedia.org/wiki/Virtual_DOM" target="_blank")<>
                    Virtual DOM
                  in Ruby.
                %li HTML is rendered on the server.
                %li
                  All DOM updates are streamed to the a small browser runtime
                  that takes care of updating the DOM.
                %li Callback handlers run on the server.
                %li Forget about REST and GraphQL.

        %section.section
          .section-inner
            %Heading.section-title(level=3)
              Efficient
            .section-content
              %Icon.icon(name="rocket" color="var(--dark)")
              %ul
                %li
                  HTTP/2 Streams with
                  %a(href="https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API" target="_blank")<>
                    compression
                  and
                  %a(href="https://msgpack.org/index.html" target="_blank")<>
                    MessagePack
                %li Designed to be deployed on the edge.
                %li Pages are interactive immediately when loaded.

        %section.section
          .section-inner
            %Heading.section-title(level=3)
              Smooth developer experience
            .section-content
              %Icon.icon(name="code" color="var(--dark)")
              %ul
                %li Hot reloading updates your page as soon as you change files.
                %li Asynchronous code without callbacks.
                %li Ruby is pretty comfortable to work with.
                %li
                  %a(href="https://github.com/mayu-live/framework/blob/main/lib/mayu/vdom.test.rb" target="_blank")<
                    Integration test example
