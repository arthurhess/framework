:ruby
  def self.get_initial_state(initial_value: 0, **)
    { count: initial_value }
  end

  def handle_decrement(_)
    update do |state|
      { count: [0, state[:count].pred].max }
    end
  end

  def handle_increment(_)
    update do |state|
      { count: state[:count].succ }
    end
  end

:css
  .counter {
    display: flex;
    margin: 4em auto;
    max-width: 10em;
    align-items: center;
    background: var(--bright);
    border-radius: 2px;
    padding: 1em;
    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
    user-select: none;
  }

  .count {
    flex-basis: 3em;
    text-align: center;
    font-size: 1.2em;
    text-align: center;
  }

  .button {
    flex: 1;
    border-radius: 100%;
    border: 0;
    background: var(--green);
    aspect-ratio: 1;
    box-shadow: rgba(0, 0, 0, 0.34) 0px 2px 4px;
    cursor: pointer;
    font-weight: bold;
    padding: 0;
    color: #fff;
    transition: filter 0.1s, box-shadow 0.1s, transform 0.1s;
    transform: scale(1);
  }

  .button:hover {
    filter: brightness(110%);
    transform: scale(1.2);
  }

  .button:active {
    filter: brightness(80%);
    box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 4px;
  }

  .button:disabled {
    filter: grayscale(100%);
    box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 4px;
  }

.counter
  - decrement_disabled = state[:count].zero?

  %button.button(title="Decrement" onclick=handle_decrement disabled=decrement_disabled) －

  %span.count= state[:count]

  %button.button(title="Increment" onclick=handle_increment) ＋
