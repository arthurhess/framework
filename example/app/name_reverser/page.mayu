Input = import("../Form/Input")
Fieldset = import("../Form/Fieldset")

initial_state do |props|
  {
    name: "",
    password: "",
    auth_state: :logged_out,
    error: nil
  }
end

handler :set_value do |e, key|
  update(key => e["value"].to_s.strip, error: nil)
end

handler :log_out do |e|
  update(auth_state: :logged_out, error: nil)
end

handler :submit do |e|
  case state[:auth_state]
  when :logged_out
    update(auth_state: :logging_in, message: "Loading user data")
    sleep 1
    update(message: "Verifying credentials")
    sleep 1
    update(message: "Checking some thing with an external service")
    sleep 1
    update(message: "Checking another thing with another external service")
    sleep 1
    update(message: "Almost done!")
    sleep 1

    if e["formData"]["name"].strip.empty?
      update(auth_state: :logged_out, error: "Empty username!")
      next
    end

    update(
      auth_state: :logged_in,
      username: e["formData"]["name"]
    )
  when :logging_in
    return
  end
end

render do
  can_log_in = state[:auth_state] == :logged_out

  <div>
    {case state[:auth_state]
    when :logged_out
      <Fieldset>
        <legend>Log in</legend>
        <p>Any credentials work. Just make something up. It's not real.</p>
        <form on-submit={handler(:submit)} disabled={!can_log_in}>
          <Input
            label="Name"
            name="name"
            on-input={handler(:set_value, :name)}
            type="text"
          />
          {if state[:error]
            <p style={{color: "red", font_weight: "bold"}}>
              {state[:error]}
            </p>
          end}
          <Input
            label="Password"
            name="password"
            on-input={handler(:set_value, :password)}
            type="password"
          />
          <button type="submit">
            Log in
          </button>
          {unless state[:name].empty?
            <p>Your name reversed is: <strong>{state[:name].reverse}</strong></p>
          end}
        </form>
      </Fieldset>
    when :logging_in
      <p>{state[:message]}</p>
    when :logged_in
      <div>
        <h1>Welcome {state[:username]}!</h1>
        <p>Your name reversed is: <strong>{state[:username].reverse}</strong></p>
        <p>
          <button on-click={handler(:log_out)}>Log out</button>
        </p>
      </div>
    end}
  </div>
end
