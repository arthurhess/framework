# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree-css` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree-css`.

# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#3
module SyntaxTree
  class << self
    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#52
    def format(source, maxwidth = T.unsafe(nil)); end

    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#45
    def parse(source); end

    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#62
    def read(filepath); end

    # source://syntax_tree/3.6.0/lib/syntax_tree.rb#40
    def register_handler(extension, handler); end
  end
end

# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#4
module SyntaxTree::CSS
  class << self
    # source://syntax_tree-css//lib/syntax_tree/css.rb#17
    def format(source, maxwidth = T.unsafe(nil)); end

    # source://syntax_tree-css//lib/syntax_tree/css.rb#21
    def parse(source); end

    # source://syntax_tree-css//lib/syntax_tree/css.rb#25
    def read(filepath); end
  end
end

# A parsed token that is an identifier that starts with an @ sign.
# https://www.w3.org/TR/css-syntax-3/#typedef-at-keyword-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#42
class SyntaxTree::CSS::AtKeywordToken < ::SyntaxTree::CSS::Node
  # @return [AtKeywordToken] a new instance of AtKeywordToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#45
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#50
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#54
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#54
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#60
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#43
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#43
  def value; end
end

# A rule that starts with an at-keyword and then accepts arbitrary tokens.
# A common example is an @media rule.
# https://www.w3.org/TR/css-syntax-3/#at-rule
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#68
class SyntaxTree::CSS::AtRule < ::SyntaxTree::CSS::Node
  # @return [AtRule] a new instance of AtRule
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#71
  def initialize(name:, prelude:, block:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#78
  def accept(visitor); end

  # Returns the value of attribute block.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#69
  def block; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#82
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#82
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#88
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#69
  def location; end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#69
  def name; end

  # Returns the value of attribute prelude.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#69
  def prelude; end
end

# A parsed token that was a quotes string that had a syntax error. It is
# mostly here for error recovery.
# https://www.w3.org/TR/css-syntax-3/#typedef-bad-string-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#96
class SyntaxTree::CSS::BadStringToken < ::SyntaxTree::CSS::Node
  # @return [BadStringToken] a new instance of BadStringToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#99
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#104
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#108
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#108
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#114
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#97
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#97
  def value; end
end

# A parsed token that was a call to "url" that had a syntax error. It is
# mostly here for error recovery.
# https://www.w3.org/TR/css-syntax-3/#typedef-bad-url-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#122
class SyntaxTree::CSS::BadURLToken < ::SyntaxTree::CSS::Node
  # @return [BadURLToken] a new instance of BadURLToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#125
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#130
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#134
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#134
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#140
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#123
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#123
  def value; end
end

# The parent class of all visitors that provides the double dispatch
# pattern. It doesn't provide any of the aliases so it can't actually be
# used to visit the tree. It's used to implement visitors that should raise
# an error if a node that's not implemented is visited.
#
# source://syntax_tree-css//lib/syntax_tree/css/basic_visitor.rb#9
class SyntaxTree::CSS::BasicVisitor
  # source://syntax_tree-css//lib/syntax_tree/css/basic_visitor.rb#10
  def visit(node); end

  # source://syntax_tree-css//lib/syntax_tree/css/basic_visitor.rb#14
  def visit_all(nodes); end

  # source://syntax_tree-css//lib/syntax_tree/css/basic_visitor.rb#18
  def visit_child_nodes(node); end
end

# A parsed token containing a CDC (-->).
# https://www.w3.org/TR/css-syntax-3/#typedef-cdc-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#147
class SyntaxTree::CSS::CDCToken < ::SyntaxTree::CSS::Node
  # @return [CDCToken] a new instance of CDCToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#150
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#154
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#158
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#158
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#164
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#148
  def location; end
end

# A parsed token containing a CDO (<!--).
# https://www.w3.org/TR/css-syntax-3/#typedef-cdo-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#171
class SyntaxTree::CSS::CDOToken < ::SyntaxTree::CSS::Node
  # @return [CDOToken] a new instance of CDOToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#174
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#178
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#182
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#182
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#188
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#172
  def location; end
end

# This is the top node in the tree if it has been converted into a CSS
# stylesheet.
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#356
class SyntaxTree::CSS::CSSStyleSheet < ::SyntaxTree::CSS::Node
  # @return [CSSStyleSheet] a new instance of CSSStyleSheet
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#359
  def initialize(rules:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#364
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#368
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#368
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#374
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#357
  def location; end

  # Returns the value of attribute rules.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#357
  def rules; end
end

# A parsed token that represents the use of a }.
# https://www.w3.org/TR/css-syntax-3/#tokendef-close-curly
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#195
class SyntaxTree::CSS::CloseCurlyToken < ::SyntaxTree::CSS::Node
  # @return [CloseCurlyToken] a new instance of CloseCurlyToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#198
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#202
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#206
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#206
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#212
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#196
  def location; end

  # Here for convenience for comparing between block types.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#217
  def value; end
end

# A parsed token that represents the use of a ).
# https://www.w3.org/TR/css-syntax-3/#tokendef-close-paren
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#224
class SyntaxTree::CSS::CloseParenToken < ::SyntaxTree::CSS::Node
  # @return [CloseParenToken] a new instance of CloseParenToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#227
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#231
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#235
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#235
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#241
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#225
  def location; end

  # Here for convenience for comparing between block types.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#246
  def value; end
end

# A parsed token that represents the use of a ].
# https://www.w3.org/TR/css-syntax-3/#tokendef-close-square
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#253
class SyntaxTree::CSS::CloseSquareToken < ::SyntaxTree::CSS::Node
  # @return [CloseSquareToken] a new instance of CloseSquareToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#256
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#260
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#264
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#264
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#270
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#254
  def location; end

  # Here for convenience for comparing between block types.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#275
  def value; end
end

# A parsed token containing a colon.
# https://www.w3.org/TR/css-syntax-3/#typedef-colon-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#282
class SyntaxTree::CSS::ColonToken < ::SyntaxTree::CSS::Node
  # @return [ColonToken] a new instance of ColonToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#285
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#289
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#293
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#293
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#299
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#283
  def location; end
end

# A parsed token that contains a comma.
# https://www.w3.org/TR/css-syntax-3/#typedef-comma-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#306
class SyntaxTree::CSS::CommaToken < ::SyntaxTree::CSS::Node
  # @return [CommaToken] a new instance of CommaToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#309
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#313
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#317
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#317
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#323
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#307
  def location; end
end

# A parsed token that contains a comment. These aren't actually declared in
# the spec because it assumes you can just drop them. We parse them into
# tokens, however, so that we can keep track of their location.
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#331
class SyntaxTree::CSS::CommentToken < ::SyntaxTree::CSS::Node
  # @return [CommentToken] a new instance of CommentToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#334
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#339
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#343
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#343
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#349
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#332
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#332
  def value; end
end

# Declarations are a particular instance of associating a property or
# descriptor name with a value.
# https://www.w3.org/TR/css-syntax-3/#declaration
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#382
class SyntaxTree::CSS::Declaration < ::SyntaxTree::CSS::Node
  # @return [Declaration] a new instance of Declaration
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#385
  def initialize(name:, value:, important:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#392
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#396
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#396
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#402
  def deconstruct_keys(keys); end

  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#406
  def important?; end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#383
  def location; end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#383
  def name; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#383
  def value; end
end

# A parsed token that has a value composed of a single code point.
# https://www.w3.org/TR/css-syntax-3/#typedef-delim-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#413
class SyntaxTree::CSS::DelimToken < ::SyntaxTree::CSS::Node
  # @return [DelimToken] a new instance of DelimToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#416
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#421
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#425
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#425
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#431
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#414
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#414
  def value; end
end

# A parsed token that contains a numeric value with a dimension.
# https://www.w3.org/TR/css-syntax-3/#typedef-dimension-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#438
class SyntaxTree::CSS::DimensionToken < ::SyntaxTree::CSS::Node
  # @return [DimensionToken] a new instance of DimensionToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#441
  def initialize(value:, unit:, type:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#448
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#452
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#452
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#458
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#439
  def location; end

  # Returns the value of attribute type.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#439
  def type; end

  # Returns the value of attribute unit.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#439
  def unit; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#439
  def value; end
end

# A conceptual token representing the end of the list of tokens. Whenever
# the list of tokens is empty, the next input token is always an EOFToken.
# https://www.w3.org/TR/css-syntax-3/#typedef-eof-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#466
class SyntaxTree::CSS::EOFToken < ::SyntaxTree::CSS::Node
  # @return [EOFToken] a new instance of EOFToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#469
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#473
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#477
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#477
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#483
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#467
  def location; end

  class << self
    # Since we create EOFToken objects a lot with ranges that are empty, it's
    # nice to have this convenience method.
    #
    # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#489
    def [](index); end
  end
end

# A formatting visitor.
#
# source://syntax_tree-css//lib/syntax_tree/css/format.rb#6
class SyntaxTree::CSS::Format < ::SyntaxTree::CSS::BasicVisitor
  # @return [Format] a new instance of Format
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#9
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#7
  def q; end

  # Visit a CSSStyleSheet node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#18
  def visit_css_stylesheet(node); end

  # Visit a Declaration node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#26
  def visit_declaration(node); end

  # Visit a DelimToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#41
  def visit_delim_token(node); end

  # Visit an IdentToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#46
  def visit_ident_token(node); end

  # Visit a StyleRule node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#51
  def visit_style_rule(node); end

  # Visit a Selectors::TypeSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/format.rb#73
  def visit_type_selector(node); end
end

# A function has a name and a value consisting of a list of component
# values.
# https://www.w3.org/TR/css-syntax-3/#function
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#497
class SyntaxTree::CSS::Function < ::SyntaxTree::CSS::Node
  # @return [Function] a new instance of Function
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#500
  def initialize(name:, value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#506
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#510
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#510
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#516
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#498
  def location; end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#498
  def name; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#498
  def value; end
end

# A parsed token that contains the beginning of a call to a function, e.g.,
# "url(".
# https://www.w3.org/TR/css-syntax-3/#typedef-function-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#524
class SyntaxTree::CSS::FunctionToken < ::SyntaxTree::CSS::Node
  # @return [FunctionToken] a new instance of FunctionToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#527
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#532
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#536
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#536
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#542
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#525
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#525
  def value; end
end

# A parsed token that contains an identifier that starts with a # sign.
# https://www.w3.org/TR/css-syntax-3/#typedef-hash-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#549
class SyntaxTree::CSS::HashToken < ::SyntaxTree::CSS::Node
  # @return [HashToken] a new instance of HashToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#552
  def initialize(value:, type:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#558
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#562
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#562
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#568
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#550
  def location; end

  # Returns the value of attribute type.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#550
  def type; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#550
  def value; end
end

# A parsed token that contains an plaintext identifier.
# https://www.w3.org/TR/css-syntax-3/#typedef-ident-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#575
class SyntaxTree::CSS::IdentToken < ::SyntaxTree::CSS::Node
  # @return [IdentToken] a new instance of IdentToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#578
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#583
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#587
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#587
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#593
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#576
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#576
  def value; end
end

# This represents a location in the source file. It maps constructs like
# tokens and parse nodes to their original location.
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#7
class SyntaxTree::CSS::Location
  # @return [Location] a new instance of Location
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#10
  def initialize(start_char:, end_char:); end

  # Returns the value of attribute end_char.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#8
  def end_char; end

  # Returns the value of attribute start_char.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#8
  def start_char; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#15
  def to(other); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#19
  def to_range; end

  class << self
    # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#23
    def from(range); end
  end
end

# A parent class for all of the various nodes in the tree. Provides common
# functionality between them.
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#30
class SyntaxTree::CSS::Node
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#31
  def format(q); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#35
  def pretty_print(q); end
end

# A parsed token that contains a numeric value.
# https://www.w3.org/TR/css-syntax-3/#typedef-number-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#600
class SyntaxTree::CSS::NumberToken < ::SyntaxTree::CSS::Node
  # @return [NumberToken] a new instance of NumberToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#603
  def initialize(value:, type:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#609
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#613
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#613
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#619
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#601
  def location; end

  # Returns the value of attribute type.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#601
  def type; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#601
  def value; end
end

# A parsed token that represents the use of a {.
# https://www.w3.org/TR/css-syntax-3/#tokendef-open-curly
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#626
class SyntaxTree::CSS::OpenCurlyToken < ::SyntaxTree::CSS::Node
  # @return [OpenCurlyToken] a new instance of OpenCurlyToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#629
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#633
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#637
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#637
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#643
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#627
  def location; end

  # Here for convenience for comparing between block types.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#648
  def value; end
end

# A parsed token that represents the use of a (.
# https://www.w3.org/TR/css-syntax-3/#tokendef-open-paren
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#655
class SyntaxTree::CSS::OpenParenToken < ::SyntaxTree::CSS::Node
  # @return [OpenParenToken] a new instance of OpenParenToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#658
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#662
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#666
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#666
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#672
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#656
  def location; end

  # Here for convenience for comparing between block types.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#677
  def value; end
end

# A parsed token that represents the use of a [.
# https://www.w3.org/TR/css-syntax-3/#tokendef-open-square
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#684
class SyntaxTree::CSS::OpenSquareToken < ::SyntaxTree::CSS::Node
  # @return [OpenSquareToken] a new instance of OpenSquareToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#687
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#691
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#695
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#695
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#701
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#685
  def location; end

  # Here for convenience for comparing between block types.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#706
  def value; end
end

# Parses CSS3 stylesheets according to https://www.w3.org/TR/css-syntax-3
# from the version dated 24 December 2021.
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#7
class SyntaxTree::CSS::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#52
  def initialize(source); end

  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#57
  def error?; end

  # Returns the value of attribute errors.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#50
  def errors; end

  # 5.3.1. Parse something according to a CSS grammar
  # https://www.w3.org/TR/css-syntax-3/#parse-grammar
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#68
  def parse(grammar: T.unsafe(nil)); end

  # 5.3.9. Parse a component value
  # https://www.w3.org/TR/css-syntax-3/#parse-component-value
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#189
  def parse_component_value; end

  # 5.3.10. Parse a list of component values
  # https://www.w3.org/TR/css-syntax-3/#parse-list-of-component-values
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#231
  def parse_component_values; end

  # 5.3.6. Parse a declaration
  # https://www.w3.org/TR/css-syntax-3/#parse-declaration
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#149
  def parse_declaration; end

  # 5.3.8. Parse a list of declarations
  # https://www.w3.org/TR/css-syntax-3/#parse-list-of-declarations
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#183
  def parse_declaration_list; end

  # 5.3.5. Parse a rule
  # https://www.w3.org/TR/css-syntax-3/#parse-rule
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#101
  def parse_rule; end

  # 5.3.4. Parse a list of rules
  # https://www.w3.org/TR/css-syntax-3/#parse-list-of-rules
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#95
  def parse_rule_list; end

  # 5.3.3. Parse a stylesheet
  # https://www.w3.org/TR/css-syntax-3/#parse-stylesheet
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#79
  def parse_stylesheet; end

  # Returns the value of attribute source.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#50
  def source; end

  private

  # 5.4.2. Consume an at-rule
  # https://www.w3.org/TR/css-syntax-3/#consume-at-rule
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#765
  def consume_at_rule(tokens); end

  # 4.3.14. Consume the remnants of a bad url
  # https://www.w3.org/TR/css-syntax-3/#consume-remnants-of-bad-url
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#693
  def consume_bad_url_remnants(index); end

  # 4.3.2. Consume comments
  # https://www.w3.org/TR/css-syntax-3/#consume-comments
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#377
  def consume_comment(index); end

  # 5.4.7. Consume a component value
  # https://www.w3.org/TR/css-syntax-3/#consume-component-value
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#975
  def consume_component_value(tokens); end

  # 5.4.6. Consume a declaration
  # https://www.w3.org/TR/css-syntax-3/#consume-declaration
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#911
  def consume_declaration(tokens); end

  # 5.4.5. Consume a list of declarations
  # https://www.w3.org/TR/css-syntax-3/#consume-list-of-declarations
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#856
  def consume_declaration_list(tokens); end

  # 4.3.7. Consume an escaped code point
  # https://www.w3.org/TR/css-syntax-3/#consume-escaped-code-point
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#536
  def consume_escaped_code_point(index); end

  # 5.4.9. Consume a function
  # https://www.w3.org/TR/css-syntax-3/#consume-function
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#1014
  def consume_function(tokens); end

  # 4.3.4. Consume an ident-like token
  # https://www.w3.org/TR/css-syntax-3/#consume-ident-like-token
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#412
  def consume_ident_like(index); end

  # 4.3.11. Consume an ident sequence
  # https://www.w3.org/TR/css-syntax-3/#consume-an-ident-sequence
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#597
  def consume_ident_sequence(index); end

  # 4.3.12. Consume a number
  # https://www.w3.org/TR/css-syntax-3/#consume-a-number
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#616
  def consume_number(index); end

  # 4.3.3. Consume a numeric token
  # https://www.w3.org/TR/css-syntax-3/#consume-numeric-token
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#392
  def consume_numeric(index); end

  # 5.4.3. Consume a qualified rule
  # https://www.w3.org/TR/css-syntax-3/#consume-qualified-rule
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#789
  def consume_qualified_rule(tokens); end

  # 5.4.1. Consume a list of rules
  # https://www.w3.org/TR/css-syntax-3/#consume-list-of-rules
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#738
  def consume_rule_list(tokens, top_level: T.unsafe(nil)); end

  # 5.4.8. Consume a simple block
  # https://www.w3.org/TR/css-syntax-3/#consume-simple-block
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#988
  def consume_simple_block(tokens); end

  # 4.3.5. Consume a string token
  # https://www.w3.org/TR/css-syntax-3/#consume-string-token
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#445
  def consume_string(index, quote); end

  # 5.4.4. Consume a style block’s contents
  # https://www.w3.org/TR/css-syntax-3/#consume-style-block
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#810
  def consume_style_block_contents(tokens); end

  # 4.3.1. Consume a token
  # https://www.w3.org/TR/css-syntax-3/#consume-token
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#281
  def consume_token(index); end

  # 7.1. The <urange> type
  # https://www.w3.org/TR/css-syntax-3/#urange-syntax
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#1039
  def consume_urange(index); end

  # 4.3.6. Consume a url token
  # https://www.w3.org/TR/css-syntax-3/#consume-url-token
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#482
  def consume_url(index); end

  # 4.3.13. Convert a string to a number
  # https://www.w3.org/TR/css-syntax-3/#convert-a-string-to-a-number
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#658
  def convert_to_number(value); end

  # 9.1. Style rules
  # https://www.w3.org/TR/css-syntax-3/#style-rules
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#1175
  def create_style_rule(rule); end

  # https://www.w3.org/TR/css-syntax-3/#digit
  #
  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#717
  def digit?(value); end

  # https://www.w3.org/TR/css-syntax-3/#ident-code-point
  #
  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#722
  def ident?(value); end

  # https://www.w3.org/TR/css-syntax-3/#parse-a-css-stylesheet
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#1163
  def parse_css_stylesheet; end

  # 3.3. Preprocessing the input stream
  # https://www.w3.org/TR/css-syntax-3/#input-preprocessing
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#248
  def preprocess(input); end

  # 4.3.9. Check if three code points would start an ident sequence
  # https://www.w3.org/TR/css-syntax-3/#would-start-an-identifier
  #
  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#562
  def start_ident_sequence?(index); end

  # 4.3.10. Check if three code points would start a number
  # https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
  #
  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#580
  def start_number?(index); end

  # Create an enumerator of tokens from the source.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#264
  def tokenize; end

  # 4.3.8. Check if two code points are a valid escape
  # https://www.w3.org/TR/css-syntax-3/#starts-with-a-valid-escape
  #
  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#556
  def valid_escape?(left, right); end

  # Checks that the start and end value of a urange are valid.
  #
  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#1145
  def valid_urange?(start_value, end_value); end

  # https://www.w3.org/TR/css-syntax-3/#whitespace
  #
  # @return [Boolean]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#727
  def whitespace?(value); end
end

# https://www.w3.org/TR/css-syntax-3/#digit
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#24
SyntaxTree::CSS::Parser::DIGIT = T.let(T.unsafe(nil), String)

# https://www.w3.org/TR/css-syntax-3/#ident-code-point
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#42
SyntaxTree::CSS::Parser::IDENT = T.let(T.unsafe(nil), String)

# https://www.w3.org/TR/css-syntax-3/#ident-start-code-point
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#39
SyntaxTree::CSS::Parser::IDENT_START = T.let(T.unsafe(nil), String)

# https://www.w3.org/TR/css-syntax-3/#letter
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#33
SyntaxTree::CSS::Parser::LETTER = T.let(T.unsafe(nil), String)

# https://www.w3.org/TR/css-syntax-3/#lowercase-letter
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#30
SyntaxTree::CSS::Parser::LOWERCASE_LETTER = T.let(T.unsafe(nil), String)

# https://www.w3.org/TR/css-syntax-3/#non-ascii-code-point
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#36
SyntaxTree::CSS::Parser::NONASCII = T.let(T.unsafe(nil), String)

# https://www.w3.org/TR/css-syntax-3/#non-printable-code-point
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#45
SyntaxTree::CSS::Parser::NON_PRINTABLE = T.let(T.unsafe(nil), String)

# Represents any kind of error that occurs during parsing.
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#9
class SyntaxTree::CSS::Parser::ParseError < ::StandardError; end

# This is used to communicate between the various tokenization algorithms.
# It transports a value along with the new index.
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#14
class SyntaxTree::CSS::Parser::State
  # @return [State] a new instance of State
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#17
  def initialize(value, index); end

  # Returns the value of attribute index.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#15
  def index; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/parser.rb#15
  def value; end
end

# https://www.w3.org/TR/css-syntax-3/#uppercase-letter
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#27
SyntaxTree::CSS::Parser::UPPERCASE_LETTER = T.let(T.unsafe(nil), String)

# https://www.w3.org/TR/css-syntax-3/#whitespace
#
# source://syntax_tree-css//lib/syntax_tree/css/parser.rb#48
SyntaxTree::CSS::Parser::WHITESPACE = T.let(T.unsafe(nil), String)

# A parsed token that contains a numeric value with a percentage sign.
# https://www.w3.org/TR/css-syntax-3/#typedef-percentage-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#713
class SyntaxTree::CSS::PercentageToken < ::SyntaxTree::CSS::Node
  # @return [PercentageToken] a new instance of PercentageToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#716
  def initialize(value:, type:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#722
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#726
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#726
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#732
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#714
  def location; end

  # Returns the value of attribute type.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#714
  def type; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#714
  def value; end
end

# A pretty-print visitor.
#
# source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#6
class SyntaxTree::CSS::PrettyPrint < ::SyntaxTree::CSS::BasicVisitor
  # @return [PrettyPrint] a new instance of PrettyPrint
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#9
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#7
  def q; end

  # Visit an AtKeywordToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#18
  def visit_at_keyword_token(node); end

  # Visit an AtRule node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#26
  def visit_at_rule(node); end

  # Visit a BadStringToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#47
  def visit_bad_string_token(node); end

  # Visit a BadURLToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#55
  def visit_bad_url_token(node); end

  # Visit a CDCToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#63
  def visit_cdc_token(node); end

  # Visit a CDOToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#68
  def visit_cdo_token(node); end

  # Visit a Selectors::ClassSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#354
  def visit_class_selector(node); end

  # Visit a CloseCurlyToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#73
  def visit_close_curly_token(node); end

  # Visit a CloseParenToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#78
  def visit_close_paren_token(node); end

  # Visit a CloseSquareToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#83
  def visit_close_square_token(node); end

  # Visit a ColonToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#88
  def visit_colon_token(node); end

  # Visit a CommaToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#101
  def visit_comma_token(node); end

  # Visit a CommentToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#93
  def visit_comment_token(node); end

  # Visit a CSSStyleSheet node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#106
  def visit_css_stylesheet(node); end

  # Visit a Declaration node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#116
  def visit_declaration(node); end

  # Visit a DelimToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#132
  def visit_delim_token(node); end

  # Visit a DimensionToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#140
  def visit_dimension_token(node); end

  # Visit an EOFToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#154
  def visit_eof_token(node); end

  # Visit a Function node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#159
  def visit_function(node); end

  # Visit a FunctionToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#177
  def visit_function_token(node); end

  # Visit a HashToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#193
  def visit_hash_token(node); end

  # Visit a Selectors::IdSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#362
  def visit_id_selector(node); end

  # Visit an IdentToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#185
  def visit_ident_token(node); end

  # Visit a NumberToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#204
  def visit_number_token(node); end

  # Visit an OpenCurlyToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#215
  def visit_open_curly_token(node); end

  # Visit an OpenParenToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#220
  def visit_open_paren_token(node); end

  # Visit an OpenSquareToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#225
  def visit_open_square_token(node); end

  # Visit a PercentageToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#230
  def visit_percentage_token(node); end

  # Visit a Selectors::PseudoClassFunction node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#378
  def visit_pseudo_class_function(node); end

  # Visit a Selectors::PseudoClassSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#370
  def visit_pseudo_class_selector(node); end

  # Visit a Selectors::PseudoElementSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#391
  def visit_pseudo_element_selector(node); end

  # Visit a QualifiedRule node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#241
  def visit_qualified_rule(node); end

  # Visit a SemicolonToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#259
  def visit_semicolon_token(node); end

  # Visit a SimpleBlock node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#264
  def visit_simple_block(node); end

  # Visit a StringToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#277
  def visit_string_token(node); end

  # Visit a StyleRule node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#285
  def visit_style_rule(node); end

  # Visit a StyleSheet node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#314
  def visit_stylesheet(node); end

  # Visit a Selectors::TypeSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#399
  def visit_type_selector(node); end

  # Visit a URange node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#324
  def visit_urange(node); end

  # Visit a URLToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#334
  def visit_url_token(node); end

  # Visit a WhitespaceToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#342
  def visit_whitespace_token(node); end

  # Visit a Selectors::WqName node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#412
  def visit_wqname(node); end

  private

  # source://syntax_tree-css//lib/syntax_tree/css/pretty_print.rb#426
  def token(name); end
end

# Associates a prelude consisting of a list of component values with a block
# consisting of a simple {} block.
# https://www.w3.org/TR/css-syntax-3/#qualified-rule
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#740
class SyntaxTree::CSS::QualifiedRule < ::SyntaxTree::CSS::Node
  # @return [QualifiedRule] a new instance of QualifiedRule
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#743
  def initialize(prelude:, block:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#749
  def accept(visitor); end

  # Returns the value of attribute block.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#741
  def block; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#753
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#753
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#759
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#741
  def location; end

  # Returns the value of attribute prelude.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#741
  def prelude; end
end

# Parses selectors according to https://www.w3.org/TR/selectors-4 from the
# version dated 7 May 2022.
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#7
class SyntaxTree::CSS::Selectors
  # @return [Selectors] a new instance of Selectors
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#229
  def initialize(tokens); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#233
  def parse; end

  # Returns the value of attribute tokens.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#227
  def tokens; end

  private

  # <attr-matcher> = [ '~' | '|' | '^' | '$' | '*' ]? '='
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#413
  def attr_matcher; end

  # <attr-modifier> = i | s
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#426
  def attr_modifier; end

  # <attribute-selector> = '[' <wq-name> ']' |
  #                  '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#395
  def attribute_selector; end

  # <class-selector> = '.' <ident-token>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#388
  def class_selector; end

  # <combinator> = '>' | '+' | '~' | [ '|' '|' ]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#334
  def combinator; end

  # <complex-selector> = <compound-selector> [ <combinator>? <compound-selector> ]*
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#269
  def complex_selector; end

  # <complex-selector-list> = <complex-selector>#
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#249
  def complex_selector_list; end

  # <compound-selector> = [ <type-selector>? <subclass-selector>*
  #   [ <pseudo-element-selector> <pseudo-class-selector>* ]* ]!
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#298
  def compound_selector; end

  # <compound-selector-list> = <compound-selector>#
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#254
  def compound_selector_list; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#486
  def consume(*values); end

  # -------------------------------------------------------------------------
  # Helper methods
  # -------------------------------------------------------------------------
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#458
  def consume_whitespace; end

  # <id-selector> = <hash-token>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#383
  def id_selector; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#502
  def maybe; end

  # <ns-prefix> = [ <ident-token> | '*' ]? '|'
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#356
  def ns_prefix; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#469
  def one_or_more; end

  # @raise [MissingTokenError]
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#512
  def options; end

  # <pseudo-class-selector> = ':' <ident-token> |
  #                     ':' <function-token> <any-value> ')'
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#433
  def pseudo_class_selector; end

  # <pseudo-element-selector> = ':' <pseudo-class-selector>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#449
  def pseudo_element_selector; end

  # <relative-selector> = <combinator>? <complex-selector>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#286
  def relative_selector; end

  # <relative-selector-list> = <relative-selector>#
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#264
  def relative_selector_list; end

  # <selector-list> = <complex-selector-list>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#244
  def selector_list; end

  # <simple-selector> = <type-selector> | <subclass-selector>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#329
  def simple_selector; end

  # <simple-selector-list> = <simple-selector>#
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#259
  def simple_selector_list; end

  # <subclass-selector> = <id-selector> | <class-selector> |
  #                 <attribute-selector> | <pseudo-class-selector>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#373
  def subclass_selector; end

  # <type-selector> = <wq-name> | <ns-prefix>? '*'
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#347
  def type_selector; end

  # <wq-name> = <ns-prefix>? <ident-token>
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#364
  def wq_name; end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#47
class SyntaxTree::CSS::Selectors::AttrMatcher < ::Struct
  # Returns the value of attribute prefix
  #
  # @return [Object] the current value of prefix
  def prefix; end

  # Sets the attribute prefix
  #
  # @param value [Object] the value to set the attribute prefix to.
  # @return [Object] the newly set value
  def prefix=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#48
class SyntaxTree::CSS::Selectors::AttrModifier < ::Struct
  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#45
class SyntaxTree::CSS::Selectors::AttributeSelector < ::Struct
  # Returns the value of attribute matcher
  #
  # @return [Object] the current value of matcher
  def matcher; end

  # Sets the attribute matcher
  #
  # @param value [Object] the value to set the attribute matcher to.
  # @return [Object] the newly set value
  def matcher=(_); end

  # Returns the value of attribute wq_name
  #
  # @return [Object] the current value of wq_name
  def wq_name; end

  # Sets the attribute wq_name
  #
  # @param value [Object] the value to set the attribute wq_name to.
  # @return [Object] the newly set value
  def wq_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#46
class SyntaxTree::CSS::Selectors::AttributeSelectorMatcher < ::Struct
  # Returns the value of attribute attr_matcher
  #
  # @return [Object] the current value of attr_matcher
  def attr_matcher; end

  # Sets the attribute attr_matcher
  #
  # @param value [Object] the value to set the attribute attr_matcher to.
  # @return [Object] the newly set value
  def attr_matcher=(_); end

  # Returns the value of attribute modifier
  #
  # @return [Object] the current value of modifier
  def modifier; end

  # Sets the attribute modifier
  #
  # @param value [Object] the value to set the attribute modifier to.
  # @return [Object] the newly set value
  def modifier=(_); end

  # Returns the value of attribute token
  #
  # @return [Object] the current value of token
  def token; end

  # Sets the attribute token
  #
  # @param value [Object] the value to set the attribute token to.
  # @return [Object] the newly set value
  def token=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# The class of an element, e.g., .foo
# https://www.w3.org/TR/selectors-4/#typedef-class-selector
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#52
class SyntaxTree::CSS::Selectors::ClassSelector < ::SyntaxTree::CSS::Node
  # @return [ClassSelector] a new instance of ClassSelector
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#55
  def initialize(value:); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#59
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#63
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#63
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#69
  def deconstruct_keys(keys); end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#53
  def value; end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#74
class SyntaxTree::CSS::Selectors::Combinator < ::Struct
  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#75
class SyntaxTree::CSS::Selectors::ComplexSelector < ::Struct
  # Returns the value of attribute combinator
  #
  # @return [Object] the current value of combinator
  def combinator; end

  # Sets the attribute combinator
  #
  # @param value [Object] the value to set the attribute combinator to.
  # @return [Object] the newly set value
  def combinator=(_); end

  # Returns the value of attribute left
  #
  # @return [Object] the current value of left
  def left; end

  # Sets the attribute left
  #
  # @param value [Object] the value to set the attribute left to.
  # @return [Object] the newly set value
  def left=(_); end

  # Returns the value of attribute right
  #
  # @return [Object] the current value of right
  def right; end

  # Sets the attribute right
  #
  # @param value [Object] the value to set the attribute right to.
  # @return [Object] the newly set value
  def right=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#76
class SyntaxTree::CSS::Selectors::CompoundSelector < ::Struct
  # Returns the value of attribute pseudo_elements
  #
  # @return [Object] the current value of pseudo_elements
  def pseudo_elements; end

  # Sets the attribute pseudo_elements
  #
  # @param value [Object] the value to set the attribute pseudo_elements to.
  # @return [Object] the newly set value
  def pseudo_elements=(_); end

  # Returns the value of attribute subclasses
  #
  # @return [Object] the current value of subclasses
  def subclasses; end

  # Sets the attribute subclasses
  #
  # @param value [Object] the value to set the attribute subclasses to.
  # @return [Object] the newly set value
  def subclasses=(_); end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# The ID of an element, e.g., #foo
# https://www.w3.org/TR/selectors-4/#typedef-id-selector
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#80
class SyntaxTree::CSS::Selectors::IdSelector < ::SyntaxTree::CSS::Node
  # @return [IdSelector] a new instance of IdSelector
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#83
  def initialize(value:); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#87
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#91
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#91
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#97
  def deconstruct_keys(keys); end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#81
  def value; end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#11
class SyntaxTree::CSS::Selectors::MissingTokenError < ::SyntaxTree::CSS::Selectors::ParseError; end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#102
class SyntaxTree::CSS::Selectors::NsPrefix < ::Struct
  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#8
class SyntaxTree::CSS::Selectors::ParseError < ::StandardError; end

# A pseudo class function call, like :nth-child.
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#105
class SyntaxTree::CSS::Selectors::PseudoClassFunction < ::SyntaxTree::CSS::Node
  # @return [PseudoClassFunction] a new instance of PseudoClassFunction
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#108
  def initialize(name:, arguments:); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#113
  def accept(visitor); end

  # Returns the value of attribute arguments.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#106
  def arguments; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#117
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#117
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#123
  def deconstruct_keys(keys); end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#106
  def name; end
end

# A pseudo class selector, like :hover.
# https://www.w3.org/TR/selectors-4/#typedef-pseudo-class-selector
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#130
class SyntaxTree::CSS::Selectors::PseudoClassSelector < ::SyntaxTree::CSS::Node
  # @return [PseudoClassSelector] a new instance of PseudoClassSelector
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#133
  def initialize(value:); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#137
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#141
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#141
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#147
  def deconstruct_keys(keys); end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#131
  def value; end
end

# A pseudo element selector, like ::before.
# https://www.w3.org/TR/selectors-4/#typedef-pseudo-element-selector
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#154
class SyntaxTree::CSS::Selectors::PseudoElementSelector < ::SyntaxTree::CSS::Node
  # @return [PseudoElementSelector] a new instance of PseudoElementSelector
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#157
  def initialize(value:); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#161
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#165
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#165
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#171
  def deconstruct_keys(keys); end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#155
  def value; end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#176
class SyntaxTree::CSS::Selectors::RelativeSelector < ::Struct
  # Returns the value of attribute combinator
  #
  # @return [Object] the current value of combinator
  def combinator; end

  # Sets the attribute combinator
  #
  # @param value [Object] the value to set the attribute combinator to.
  # @return [Object] the newly set value
  def combinator=(_); end

  # Returns the value of attribute complex_selector
  #
  # @return [Object] the current value of complex_selector
  def complex_selector; end

  # Sets the attribute complex_selector
  #
  # @param value [Object] the value to set the attribute complex_selector to.
  # @return [Object] the newly set value
  def complex_selector=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# A custom enumerator around the list of tokens. This allows us to save a
# reference to where we are when we're looking at the stream and rollback
# to that point if we need to.
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#17
class SyntaxTree::CSS::Selectors::TokenEnumerator
  # @return [TokenEnumerator] a new instance of TokenEnumerator
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#23
  def initialize(tokens); end

  # Returns the value of attribute index.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#21
  def index; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#28
  def next; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#32
  def peek; end

  # Returns the value of attribute tokens.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#21
  def tokens; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#36
  def transaction; end
end

# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#18
class SyntaxTree::CSS::Selectors::TokenEnumerator::Rollback < ::StandardError; end

# A selector for a specific tag name.
# https://www.w3.org/TR/selectors-4/#typedef-type-selector
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#180
class SyntaxTree::CSS::Selectors::TypeSelector < ::SyntaxTree::CSS::Node
  # @return [TypeSelector] a new instance of TypeSelector
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#183
  def initialize(prefix:, value:); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#188
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#192
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#192
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#198
  def deconstruct_keys(keys); end

  # Returns the value of attribute prefix.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#181
  def prefix; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#181
  def value; end
end

# The name of an element, e.g., foo
#
# source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#204
class SyntaxTree::CSS::Selectors::WqName < ::SyntaxTree::CSS::Node
  # @return [WqName] a new instance of WqName
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#207
  def initialize(prefix:, name:); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#212
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#216
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#216
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#222
  def deconstruct_keys(keys); end

  # Returns the value of attribute name.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#205
  def name; end

  # Returns the value of attribute prefix.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/selectors.rb#205
  def prefix; end
end

# A parsed token that contains a comma.
# https://www.w3.org/TR/css-syntax-3/#typedef-semicolon-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#766
class SyntaxTree::CSS::SemicolonToken < ::SyntaxTree::CSS::Node
  # @return [SemicolonToken] a new instance of SemicolonToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#769
  def initialize(location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#773
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#777
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#777
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#783
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#767
  def location; end
end

# A simple block has an associated token (either a <[-token>, <(-token>, or
# <{-token>) and a value consisting of a list of component values.
# https://www.w3.org/TR/css-syntax-3/#simple-block
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#791
class SyntaxTree::CSS::SimpleBlock < ::SyntaxTree::CSS::Node
  # @return [SimpleBlock] a new instance of SimpleBlock
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#794
  def initialize(token:, value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#800
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#804
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#804
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#810
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#792
  def location; end

  # Returns the value of attribute token.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#792
  def token; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#792
  def value; end
end

# A parsed token that contains a quoted string.
# https://www.w3.org/TR/css-syntax-3/#typedef-string-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#817
class SyntaxTree::CSS::StringToken < ::SyntaxTree::CSS::Node
  # @return [StringToken] a new instance of StringToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#820
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#825
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#829
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#829
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#835
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#818
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#818
  def value; end
end

# A style rule is a qualified rule that associates a selector list with a
# list of property declarations and possibly a list of nested rules.
# https://www.w3.org/TR/css-syntax-3/#style-rule
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#843
class SyntaxTree::CSS::StyleRule < ::SyntaxTree::CSS::Node
  # @return [StyleRule] a new instance of StyleRule
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#846
  def initialize(selectors:, declarations:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#852
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#856
  def child_nodes; end

  # Returns the value of attribute declarations.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#844
  def declarations; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#856
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#862
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#844
  def location; end

  # Returns the value of attribute selectors.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#844
  def selectors; end
end

# This is the top node in the tree if it hasn't been converted into a CSS
# stylesheet.
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#869
class SyntaxTree::CSS::StyleSheet < ::SyntaxTree::CSS::Node
  # @return [StyleSheet] a new instance of StyleSheet
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#872
  def initialize(rules:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#877
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#881
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#881
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#887
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#870
  def location; end

  # Returns the value of attribute rules.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#870
  def rules; end
end

# A parsed token that contains a URL. Note that this is different from a
# function call to the "url" function only if quotes aren't used.
# https://www.w3.org/TR/css-syntax-3/#typedef-url-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#921
class SyntaxTree::CSS::URLToken < ::SyntaxTree::CSS::Node
  # @return [URLToken] a new instance of URLToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#924
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#929
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#933
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#933
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#939
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#922
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#922
  def value; end
end

# This node represents the use of the urange micro syntax, e.g. U+1F601.
# https://www.w3.org/TR/css-syntax-3/#typedef-urange
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#894
class SyntaxTree::CSS::URange < ::SyntaxTree::CSS::Node
  # @return [URange] a new instance of URange
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#897
  def initialize(start_value:, end_value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#903
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#907
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#907
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#913
  def deconstruct_keys(keys); end

  # Returns the value of attribute end_value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#895
  def end_value; end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#895
  def location; end

  # Returns the value of attribute start_value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#895
  def start_value; end
end

# A visitor that walks through the tree.
#
# source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#6
class SyntaxTree::CSS::Visitor
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#7
  def visit(node); end

  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#11
  def visit_all(nodes); end

  # Visit an AtKeywordToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_at_keyword(node); end

  # Visit an AtRule node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_at_rule(node); end

  # Visit a BadStringToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_bad_string_token(node); end

  # Visit a BadURLToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_bad_url_token(node); end

  # Visit a CDCToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_cdc_token(node); end

  # Visit a CDOToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_cdo_token(node); end

  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_child_nodes(node); end

  # Visit a Selectors::ClassSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_class_selector(node); end

  # Visit a CloseCurlyToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_close_curly_token(node); end

  # Visit a CloseParenToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_close_paren_token(node); end

  # Visit a CloseSquareToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_close_square_token(node); end

  # Visit a ColonToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_colon_token(node); end

  # Visit a CommaToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_comma_token(node); end

  # Visit a CommentToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_comment_token(node); end

  # Visit a CSSStyleSheet node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_css_stylesheet(node); end

  # Visit a Declaration node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_declaration(node); end

  # Visit a DelimToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_delim_token(node); end

  # Visit a DimensionToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_dimension_token(node); end

  # Visit an EOFToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_eof_token(node); end

  # Visit a Function node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_function(node); end

  # Visit a FunctionToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_function_token(node); end

  # Visit a HashToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_hash_token(node); end

  # Visit a Selectors::IdSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_id_selector(node); end

  # Visit an IdentToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_ident_token(node); end

  # Visit a NumberToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_number_token(node); end

  # Visit an OpenCurlyToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_open_curly_token(node); end

  # Visit an OpenParenToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_open_paren_token(node); end

  # Visit an OpenSquareToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_open_square_token(node); end

  # Visit a PercentageToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_percentage_token(node); end

  # Visit a Selectors::PseudoClassFunction node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_pseudo_class_function(node); end

  # Visit a Selectors::PseudoClassSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_pseudo_class_selector(node); end

  # Visit a Selectors::PseudoElementSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_pseudo_element_selector(node); end

  # Visit a QualifiedRule node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_qualified_rule(node); end

  # Visit a SemicolonToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_semicolon_token(node); end

  # Visit a SimpleBlock node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_simple_block(node); end

  # Visit a StringToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_string_token(node); end

  # Visit a StyleRule node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_style_rule(node); end

  # Visit a StyleSheet node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_stylesheet(node); end

  # Visit a Selectors::TypeSelector node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_type_selector(node); end

  # Visit a URange node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_urange(node); end

  # Visit a URLToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_url_token(node); end

  # Visit a WhitespaceToken node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_whitespace_token(node); end

  # Visit a Selectors::WqName node.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/visitor.rb#15
  def visit_wqname(node); end
end

# A parsed token that contains only whitespace.
# https://www.w3.org/TR/css-syntax-3/#typedef-whitespace-token
#
# source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#946
class SyntaxTree::CSS::WhitespaceToken < ::SyntaxTree::CSS::Node
  # @return [WhitespaceToken] a new instance of WhitespaceToken
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#949
  def initialize(value:, location:); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#954
  def accept(visitor); end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#958
  def child_nodes; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#958
  def deconstruct; end

  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#964
  def deconstruct_keys(keys); end

  # Returns the value of attribute location.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#947
  def location; end

  # Returns the value of attribute value.
  #
  # source://syntax_tree-css//lib/syntax_tree/css/nodes.rb#947
  def value; end
end

# source://syntax_tree/3.6.0/lib/syntax_tree.rb#36
SyntaxTree::DEFAULT_PRINT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://syntax_tree/3.6.0/lib/syntax_tree.rb#30
SyntaxTree::HANDLERS = T.let(T.unsafe(nil), Hash)

# source://syntax_tree/3.6.0/lib/syntax_tree/node.rb#5131
SyntaxTree::PATTERNS = T.let(T.unsafe(nil), Array)

# source://syntax_tree/3.6.0/lib/syntax_tree/version.rb#4
SyntaxTree::VERSION = T.let(T.unsafe(nil), String)
