# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/async-http-cache/all/async-http-cache.rbi
#
# async-http-cache-0.4.2

module Async
end
module Async::HTTP
end
module Async::HTTP::Cache
end
module Async::HTTP::Cache::Body
  def self.wrap(response, &block); end
end
class Async::HTTP::Cache::Response < Protocol::HTTP::Response
  def age; end
  def cachable?; end
  def dup; end
  def etag; end
  def expired?; end
  def generated_at; end
  def initialize(response, body); end
end
module Async::HTTP::Cache::Store
  def self.default; end
end
class Async::HTTP::Cache::Store::Memory
  def close; end
  def index; end
  def initialize(limit: nil); end
  def insert(key, request, response); end
  def lookup(key, request); end
  def prune; end
end
class Async::HTTP::Cache::Store::Vary
  def close; end
  def delegate; end
  def initialize(delegate, vary = nil); end
  def insert(key, request, response); end
  def key_for(headers, vary); end
  def lookup(key, request); end
  def normalize(request); end
end
class Async::HTTP::Cache::General < Protocol::HTTP::Middleware
  def cacheable?(request); end
  def call(request); end
  def close; end
  def count; end
  def initialize(app, store: nil); end
  def key(request); end
  def store; end
  def wrap(key, request, response); end
end
