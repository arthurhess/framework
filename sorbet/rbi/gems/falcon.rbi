# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/falcon/all/falcon.rbi
#
# falcon-0.39.2

module Falcon
end
module Falcon::Middleware
end
class Falcon::Middleware::Verbose < Protocol::HTTP::Middleware
  def annotate(request); end
  def call(request); end
  def initialize(app, logger = nil); end
end
module Falcon::Adapters
end
class Falcon::Adapters::Rewindable < Protocol::HTTP::Middleware
  def call(request); end
  def initialize(app); end
  def needs_rewind?(request); end
end
class Falcon::Adapters::Input
  def body; end
  def close; end
  def each(&block); end
  def eof?; end
  def gets; end
  def initialize(body); end
  def read(length = nil, buffer = nil); end
  def read_next; end
  def rewind; end
end
class Falcon::Adapters::Output < Protocol::HTTP::Body::Readable
  def body; end
  def close(error = nil); end
  def each(&block); end
  def empty?; end
  def initialize(body, length); end
  def inspect; end
  def length; end
  def read; end
  def ready?; end
  def self.wrap(status, headers, body); end
end
module Falcon::Middleware::BadRequest
  def self.call(request); end
  def self.close; end
end
class Falcon::Middleware::Proxy < Protocol::HTTP::Middleware
  def call(request); end
  def close; end
  def connect(endpoint); end
  def count; end
  def initialize(app, hosts); end
  def lookup(request); end
  def prepare_headers(headers); end
  def prepare_request(request, host); end
end
class Falcon::Adapters::Response < Protocol::HTTP::Response
  def initialize(status, headers, body, protocol = nil); end
  def self.wrap(status, headers, body, request = nil); end
  def self.wrap_headers(fields); end
end
class Falcon::Adapters::Rack
  def call(request); end
  def failure_response(exception); end
  def initialize(app); end
  def unwrap_headers(headers, env); end
  def unwrap_request(request, env); end
end
class Falcon::Adapters::Rack::FullHijack < StandardError
end
class Falcon::Server < Async::HTTP::Server
  def self.middleware(rack_app, verbose: nil, cache: nil); end
end
