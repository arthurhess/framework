# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `filewatcher` gem.
# Please instead update this file by running `bin/tapioca gem filewatcher`.

# Simple file watcher. Detect changes in files and directories.
#
# Issues: Currently doesn't monitor changes in directorynames
class Filewatcher
  include ::Filewatcher::Cycles

  # @return [Filewatcher] a new instance of Filewatcher
  def initialize(unexpanded_filenames, options = T.unsafe(nil)); end

  # Calls the update block repeatedly until all changes in the
  # current snapshot are dealt with
  def finalize(&on_update); end

  # Returns the value of attribute interval.
  def interval; end

  # Sets the attribute interval
  #
  # @param value the value to set the attribute interval to.
  def interval=(_arg0); end

  # Returns the value of attribute keep_watching.
  def keep_watching; end

  def last_found_filenames; end
  def pause; end
  def resume; end

  # Ends the watch, allowing any remaining changes to be finalized.
  # Used mainly in multi-threaded situations.
  def stop; end

  def update_spinner(label); end

  # @yield ['', '']
  def watch(&on_update); end

  private

  def expand_directories(patterns); end

  # @return [Boolean]
  def filesystem_updated?(snapshot = T.unsafe(nil)); end

  def last_snapshot; end

  # Takes a snapshot of the current status of watched files.
  # (Allows avoidance of potential race condition during #finalize)
  def mtime_snapshot; end
end

# Module for all cycles in `Filewatcher#watch`
module Filewatcher::Cycles
  private

  def main_cycle; end
  def pausing_cycle; end
  def trigger_changes(on_update = T.unsafe(nil)); end
  def watching_cycle; end
end

Filewatcher::VERSION = T.let(T.unsafe(nil), String)
