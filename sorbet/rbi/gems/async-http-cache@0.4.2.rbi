# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `async-http-cache` gem.
# Please instead update this file by running `bin/tapioca gem async-http-cache`.

module Async
  class << self
    def logger; end
  end
end

module Async::HTTP; end
module Async::HTTP::Cache; end

module Async::HTTP::Cache::Body
  class << self
    def wrap(response, &block); end
  end
end

Async::HTTP::Cache::Body::ETAG = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::Body::TRAILER = T.let(T.unsafe(nil), String)

class Async::HTTP::Cache::General < ::Protocol::HTTP::Middleware
  # @return [General] a new instance of General
  def initialize(app, store: T.unsafe(nil)); end

  # @return [Boolean]
  def cacheable?(request); end

  def call(request); end
  def close; end

  # Returns the value of attribute count.
  def count; end

  def key(request); end

  # Returns the value of attribute store.
  def store; end

  def wrap(key, request, response); end
end

Async::HTTP::Cache::General::AUTHORIZATION = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::General::CACHE_CONTROL = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::General::CONTENT_TYPE = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::General::COOKIE = T.let(T.unsafe(nil), String)

class Async::HTTP::Cache::Response < ::Protocol::HTTP::Response
  # @return [Response] a new instance of Response
  def initialize(response, body); end

  def age; end

  # @return [Boolean]
  def cachable?; end

  def dup; end
  def etag; end

  # @return [Boolean]
  def expired?; end

  # Returns the value of attribute generated_at.
  def generated_at; end
end

Async::HTTP::Cache::Response::CACHE_CONTROL = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::Response::ETAG = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::Response::SET_COOKIE = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::Response::X_CACHE = T.let(T.unsafe(nil), String)

module Async::HTTP::Cache::Store
  class << self
    def default; end
  end
end

Async::HTTP::Cache::Store::ACCEPT_ENCODING = T.let(T.unsafe(nil), String)

class Async::HTTP::Cache::Store::Memory
  # @return [Memory] a new instance of Memory
  def initialize(limit: T.unsafe(nil)); end

  def close; end

  # Returns the value of attribute index.
  def index; end

  def insert(key, request, response); end
  def lookup(key, request); end

  # @return [Integer] the number of pruned entries.
  def prune; end
end

Async::HTTP::Cache::Store::Memory::IF_NONE_MATCH = T.let(T.unsafe(nil), String)
Async::HTTP::Cache::Store::Memory::NOT_MODIFIED = T.let(T.unsafe(nil), Protocol::HTTP::Response)
Async::HTTP::Cache::Store::VARY = T.let(T.unsafe(nil), String)

class Async::HTTP::Cache::Store::Vary
  # @return [Vary] a new instance of Vary
  def initialize(delegate, vary = T.unsafe(nil)); end

  def close; end

  # Returns the value of attribute delegate.
  def delegate; end

  def insert(key, request, response); end
  def key_for(headers, vary); end
  def lookup(key, request); end
  def normalize(request); end
end

Async::HTTP::Cache::VERSION = T.let(T.unsafe(nil), String)
Async::HTTP::DEFAULT_RETRIES = T.let(T.unsafe(nil), Integer)
Async::VERSION = T.let(T.unsafe(nil), String)
