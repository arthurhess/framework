# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `shellany` gem.
# Please instead update this file by running `bin/tapioca gem shellany`.

module Shellany; end

# The Guard sheller abstract the actual subshell
# calls and allow easier stubbing.
class Shellany::Sheller
  # Creates a new Guard::Sheller object.
  #
  # @param args [String] a command to run in a subshell
  # @param args [Array<String>] an array of command parts to run in a subshell
  # @param args [*String] a list of command parts to run in a subshell
  # @return [Sheller] a new instance of Sheller
  def initialize(*args); end

  # Returns true if the command succeeded, false otherwise.
  #
  # @return [Boolean] whether or not the command succeeded
  def ok?; end

  # Returns true if the command has already been run, false otherwise.
  #
  # @return [Boolean] whether or not the command has already been run
  def ran?; end

  # Runs the command.
  #
  # @return [Boolean] whether or not the command succeeded.
  def run; end

  # Returns the value of attribute status.
  def status; end

  # Returns the command's error output.
  #
  # @return [String] the command output
  def stderr; end

  # Returns the command's output.
  #
  # @return [String] the command output
  def stdout; end

  class << self
    # Only needed on JRUBY, because MRI properly detects ';' and metachars
    def _shellize_if_needed(args); end

    def _system_with_capture(*args); end
    def _system_with_no_capture(*args); end

    # Shortcut for new(command).run
    def run(*args); end

    # Shortcut for new(command).run.stderr
    def stderr(*args); end

    # Shortcut for new(command).run.stdout
    def stdout(*args); end

    # No output capturing
    #
    # NOTE: `$stdout.puts system('cls')` on Windows won't work like
    # it does for on systems with ansi terminals, so we need to be
    # able to call Kernel.system directly.
    def system(*args); end
  end
end
